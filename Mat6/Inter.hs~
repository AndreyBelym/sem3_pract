module Main where
import Prelude hiding (catch)
import Control.Exception
import Graphics.UI.Gtk
import Graphics.UI.Gtk.Builder
import Euler


getValue:: Entry->IO (Double)
getValue entry=do
    y<-get entry entryText
    evaluate (read y)
 
onClickExit=mainQuit

getValues::[Entry]->IO [Double]
getValues xs=getValues' xs []

getValues'::[Entry]->String->IO [Double]
getValues' [] ers |ers==[]= return []
                  |otherwise= error ers
                    
getValues' (x:xs) ers=do
    y<-try(getValue x)::IO(Either SomeException Double)
    
    case y of
        Left e->do
            v<-entryGetText x
            vs<-getValues' xs (ers++"Неправильное значение: \"" ++ v++"\"!\n")
            return vs
        Right v->do
            vs<-getValues' xs ers
            return (v:vs)
main::IO ()
main = do
   let
        
   initGUI
   gtkbuilder<-builderNew
   builderAddFromFile gtkbuilder "gui.glade"
   let
        showFail::SomeException-> IO()
        showFail e=do
            dlg<-messageDialogNew Nothing [DialogModal] MessageError ButtonsClose ("Ошибки:\n"++ show e) 
            _<-dialogRun dlg
            widgetDestroy dlg
        showRes _ [] =[];showRes [] _=[]
        showRes (x:xs) (y:ys)="f("++(show x)++")="++(show y)++"\n"++(showRes xs ys)
        onClickRun=do
            entryA <- builderGetObject gtkbuilder castToEntry "entry1"
            entryB <- builderGetObject gtkbuilder castToEntry "entry2"
            entryH <- builderGetObject gtkbuilder castToEntry "entry3"
            entryY0 <- builderGetObject gtkbuilder castToEntry "entry4"
            entryY0 <- builderGetObject gtkbuilder castToEntry "entry4"
            labelResult <- builderGetObject gtkbuilder castToLabel "labelResult"
            [a,b,h,y0,k,p]<-getValues [entryA,entryB,entryH,entryY0]
            if a>=b then error "Верхняя граница меньше/равна нижней!" else             
                if h<=0 then error "Шаг меньше/равен 0!" else do
                        let 
                            xs=[a,a+h..b]
                            res=euler (f' 0.4 0.4) xs y0
                        set labelResult [labelText:="Результат:\n"++ (showRes xs res)] 
   window    <- builderGetObject gtkbuilder castToWindow "window1"
   buttonRun <- builderGetObject gtkbuilder castToButton "buttonRun"
   onClicked buttonRun (catch onClickRun showFail)
   buttonExit <- builderGetObject gtkbuilder castToButton "button2"
   onClicked buttonExit onClickExit
   onDestroy window mainQuit
   widgetShowAll window
   mainGUI

